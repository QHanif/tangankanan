import 'package:flutter/material.dart';
import 'package:tangankanan/models/project.dart';
import 'package:tangankanan/models/pledge.dart';
import 'package:tangankanan/services/database_service.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:tangankanan/views/style.dart';

class PaymentPage extends StatefulWidget {
  final Project project;

  const PaymentPage({Key? key, required this.project}) : super(key: key);

  @override
  _PaymentPageState createState() => _PaymentPageState();
}

class _PaymentPageState extends State<PaymentPage>
    with SingleTickerProviderStateMixin {
  final _amountController = TextEditingController();
  final _formKey = GlobalKey<FormState>();
  final _auth = FirebaseAuth.instance;

  bool _isProcessing = false;
  // ignore: unused_field
  bool _isPaymentSuccessful = false; // Added payment success flag
  String? _selectedBank;

  final List<String> _paymentMethods = ['Online Banking', 'Debit/Credit Card'];
  final List<String> _banks = [
    'Maybank',
    'CIMB Bank',
    'RHB',
    'Public Bank',
    'AmBank',
    'Bank Islam',
    'Bank Muamalat',
    'HSBC',
    'OCBC Bank',
  ];

  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: _paymentMethods.length, vsync: this);
  }

  void _processPayment() async {
    if (_formKey.currentState!.validate()) {
      // Close the keyboard
      FocusScope.of(context).unfocus();

      final amount = double.parse(_amountController.text);
      final user = _auth.currentUser;

      if (user != null) {
        final pledge = Pledge(
          pledgeId: '', // This will be generated by Firestore
          userId: user.uid,
          projectId: widget.project.projectId,
          amount: amount,
          date: DateTime.now(),
          status: 'completed',
        );

        setState(() {
          _isProcessing = true;
          _isPaymentSuccessful = false; // Reset payment success flag
        });

        try {
          // Simulate payment processing
          await Future.delayed(Duration(seconds: 4));

          // On success, update the project currentFund and create a pledge
          await DatabaseService()
              .updateProjectFund(widget.project.projectId, amount);
          await DatabaseService().createPledge(pledge);
          await DatabaseService().addProjectToUserBackedProjects(
              user.uid, widget.project.projectId);
          await DatabaseService()
              .addBackerToProject(widget.project.projectId, user.uid);

          setState(() {
            _isPaymentSuccessful = true; // Set payment success flag
          });

          // Show success SnackBar
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Payment Successful!'),
              backgroundColor: Colors.green,
            ),
          );

          Navigator.pop(context);
        } catch (e) {
          print('Error processing payment: $e');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error processing payment: $e')),
          );
        } finally {
          setState(() {
            _isProcessing = false;
          });
        }
      } else {
        // Handle user not logged in
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('You need to be logged in to support a project.')),
        );
      }
    }
  }

  Widget _buildBankGrid() {
    final Map<String, String> bankLogos = {
      'Maybank': 'assets/bank_icon/maybank.png',
      'CIMB Bank': 'assets/bank_icon/cimb.png',
      'RHB': 'assets/bank_icon/rhb.png',
      'Public Bank': 'assets/bank_icon/public_bank.png',
      'AmBank': 'assets/bank_icon/ambank.png',
      'Bank Islam': 'assets/bank_icon/bank_islam.png',
      'Bank Muamalat': 'assets/bank_icon/bank_muamalat.png',
      'HSBC': 'assets/bank_icon/hsbc.png',
      'OCBC Bank': 'assets/bank_icon/ocbc.png',
    };

    return GridView.builder(
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 3,
        childAspectRatio: 1,
        crossAxisSpacing: 10,
        mainAxisSpacing: 10,
      ),
      itemCount: _banks.length,
      itemBuilder: (context, index) {
        final bank = _banks[index];
        final isSelected = _selectedBank == bank;
        return GestureDetector(
          onTap: () {
            setState(() {
              _selectedBank = bank;
            });
          },
          child: Card(
            color:
                isSelected ? Color.fromARGB(255, 222, 222, 222) : Colors.white,
            child: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Image.asset(
                    bankLogos[bank]!,
                    height: 80,
                    width: 80,
                  ),
                  SizedBox(height: 8),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _cardDetailTextfield(
      String labelText, TextInputType keyboardType, IconData prefixIcon) {
    return TextFormField(
      decoration: InputDecoration(
        labelText: labelText,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(15),
        ),
        prefixIcon: Icon(prefixIcon),
      ),
      keyboardType: keyboardType,
    );
  }

  Widget _buildCardForm() {
    return Column(
      children: [
        _cardDetailTextfield('First Name', TextInputType.name, Icons.person),
        SizedBox(height: 10),
        _cardDetailTextfield('Last Name', TextInputType.name, Icons.person),
        SizedBox(height: 10),
        _cardDetailTextfield(
            'Card Number', TextInputType.number, Icons.credit_card),
        SizedBox(height: 10),
        _cardDetailTextfield(
            'Expiry Date', TextInputType.datetime, Icons.date_range),
        SizedBox(height: 10),
        _cardDetailTextfield('CVV', TextInputType.number, Icons.lock),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        title: Text('Support this project'),
      ),
      resizeToAvoidBottomInset:
          true, // This adjusts the layout when the keyboard appears
      body: Stack(
        children: [
          SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    widget.project.title,
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 20),
                  TextFormField(
                    controller: _amountController,
                    decoration: InputDecoration(
                      labelText: 'Enter contribution amount',
                      prefixText: 'RM ',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(15),
                      ),
                    ),
                    keyboardType: TextInputType.number,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter an amount';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 20),
                  TabBar(
                    controller: _tabController,
                    tabs: _paymentMethods
                        .map((method) => Tab(text: method))
                        .toList(),
                  ),
                  SizedBox(height: 20),
                  Container(
                    height: 400, // Adjust height as needed
                    child: TabBarView(
                      controller: _tabController,
                      children: [
                        _buildBankGrid(),
                        SingleChildScrollView(child: _buildCardForm()),
                      ],
                    ),
                  ),
                  AppStyles.button('Confirm', _processPayment),
                  SizedBox(height: 20),
                  RichText(
                    textAlign: TextAlign.center,
                    text: TextSpan(
                      style: TextStyle(color: Colors.grey),
                      children: [
                        TextSpan(
                            text: 'By conforming you agree to Tangankananâ€™s '),
                        TextSpan(
                          text: 'Term of Use',
                          style: TextStyle(color: Colors.blue),
                        ),
                        TextSpan(text: ' and '),
                        TextSpan(
                          text: ' Privacy Policy',
                          style: TextStyle(color: Colors.blue),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          if (_isProcessing)
            Container(
              color: Colors.black.withOpacity(0.85),
              child: Center(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text(
                      'Processing payment...',
                      style: TextStyle(color: Colors.white, fontSize: 16),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}
